trigger:
  branches:
    include:
      - dev

variables:
- group: MyDevInfraVars
- name: imageTag
  value: '$(Build.BuildId)'

pool:
  name: MySelfHostedPool

parameters:
  - name: services
    type: object
    default:
      - name: inventoryservice
        path: src/InventoryService/src
      - name: productservice
        path: src/Product-service/src
      # Add more services here...
      

stages:
- stage: BuildAndPush
  displayName: Build and Push All Microservices
  jobs:
    - ${{ each svc in parameters.services }}:
      - job: BuildPush_${{ svc.name }}
        displayName: Build and Push ${{ svc.name }}
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'MyACRServiceConnection'
              repository: ${{ svc.name }}
              command: 'buildAndPush'
              Dockerfile: '$(Build.SourcesDirectory)/${{ svc.path }}/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)/${{ svc.path }}'
              tags: |
                $(imageTag)

- stage: Deploy
  dependsOn: BuildAndPush
  displayName: Deploy All Services to ACA
  jobs:
    - ${{ each svc in parameters.services }}:
      - job: Deploy_${{ svc.name }}
        displayName: Deploy ${{ svc.name }}
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'MyAzureServiceConnection'
              scriptType: 'ps'  # PowerShell
              scriptLocation: 'inlineScript'
              inlineScript: |
                  Write-Host "Deploying ${{ svc.name }}..."

                  $templatePath = "$(Build.SourcesDirectory)\infrastructure\Bicep\main.bicep"

                  if (-Not (Test-Path $templatePath)) {
                    Write-Host "Bicep file NOT FOUND at: $templatePath"
                    Get-ChildItem -Path "$(Build.SourcesDirectory)\infrastructure\Bicep\" | Format-List
                    throw "Missing template file"
                  }

                  Write-Host "Using Windows path for deployment: $templatePath"

                  az deployment group create `
                    --resource-group $(resourceGroup) `
                    --template-file "$templatePath" `
                    --parameters `
                      BuildId=$(Build.BuildId) `
                      acrName=$(acrName) `
                      env=$(env) `
                      image=$(acrLoginServer)/${{ svc.name }}:$(imageTag) `
                      revisionSuffix="rev-$(Build.BuildId)" `
                      keyvaultUri=$(KEYVAULT_URI)

